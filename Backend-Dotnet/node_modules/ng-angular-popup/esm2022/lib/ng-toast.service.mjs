import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { Message } from './toast.model';
import * as i0 from "@angular/core";
class NgToastService {
    toastDetails$ = new Subject();
    constructor() { }
    getToastDetails() {
        return this.toastDetails$.asObservable();
    }
    success(message) {
        this.toastDetails$.next({ type: Message.success, detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    error(message) {
        this.toastDetails$.next({ type: Message.error, detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    info(message) {
        this.toastDetails$.next({ type: Message.info, detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    warning(message) {
        this.toastDetails$.next({ type: Message.warning, detail: message.detail, summary: message.summary, position: message.position, duration: message.duration, sticky: message.sticky });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: NgToastService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: NgToastService, providedIn: 'root' });
}
export { NgToastService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: NgToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXRvYXN0L3NyYy9saWIvbmctdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFVLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFaEQsTUFHYSxjQUFjO0lBRWpCLGFBQWEsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBRTlDLGdCQUFnQixDQUFDO0lBRWpCLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzlMLENBQUM7SUFDRCxLQUFLLENBQUMsT0FBZTtRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUM1TCxDQUFDO0lBQ0QsSUFBSSxDQUFDLE9BQWU7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDM0wsQ0FBQztJQUNELE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzlMLENBQUM7dUdBckJVLGNBQWM7MkdBQWQsY0FBYyxjQUZiLE1BQU07O1NBRVAsY0FBYzsyRkFBZCxjQUFjO2tCQUgxQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElUb2FzdCwgTWVzc2FnZSB9IGZyb20gJy4vdG9hc3QubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1RvYXN0U2VydmljZSB7XG5cbiAgcHJpdmF0ZSB0b2FzdERldGFpbHMkID0gbmV3IFN1YmplY3Q8SVRvYXN0PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgZ2V0VG9hc3REZXRhaWxzKCkge1xuICAgIHJldHVybiB0aGlzLnRvYXN0RGV0YWlscyQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBzdWNjZXNzKG1lc3NhZ2U6IElUb2FzdCkge1xuICAgIHRoaXMudG9hc3REZXRhaWxzJC5uZXh0KDxJVG9hc3Q+eyB0eXBlOiBNZXNzYWdlLnN1Y2Nlc3MsIGRldGFpbDogbWVzc2FnZS5kZXRhaWwsIHBvc2l0aW9uOiBtZXNzYWdlLnBvc2l0aW9uLCBzdW1tYXJ5OiBtZXNzYWdlLnN1bW1hcnksIGR1cmF0aW9uOiBtZXNzYWdlLmR1cmF0aW9uLCBzdGlja3k6IG1lc3NhZ2Uuc3RpY2t5IH0pXG4gIH1cbiAgZXJyb3IobWVzc2FnZTogSVRvYXN0KSB7XG4gICAgdGhpcy50b2FzdERldGFpbHMkLm5leHQoPElUb2FzdD57IHR5cGU6IE1lc3NhZ2UuZXJyb3IsIGRldGFpbDogbWVzc2FnZS5kZXRhaWwsIHBvc2l0aW9uOiBtZXNzYWdlLnBvc2l0aW9uLCBzdW1tYXJ5OiBtZXNzYWdlLnN1bW1hcnksIGR1cmF0aW9uOiBtZXNzYWdlLmR1cmF0aW9uLCBzdGlja3k6IG1lc3NhZ2Uuc3RpY2t5IH0pXG4gIH1cbiAgaW5mbyhtZXNzYWdlOiBJVG9hc3QpIHtcbiAgICB0aGlzLnRvYXN0RGV0YWlscyQubmV4dCg8SVRvYXN0PnsgdHlwZTogTWVzc2FnZS5pbmZvLCBkZXRhaWw6IG1lc3NhZ2UuZGV0YWlsLCBwb3NpdGlvbjogbWVzc2FnZS5wb3NpdGlvbiwgc3VtbWFyeTogbWVzc2FnZS5zdW1tYXJ5LCBkdXJhdGlvbjogbWVzc2FnZS5kdXJhdGlvbiwgc3RpY2t5OiBtZXNzYWdlLnN0aWNreSB9KVxuICB9XG4gIHdhcm5pbmcobWVzc2FnZTogSVRvYXN0KSB7XG4gICAgdGhpcy50b2FzdERldGFpbHMkLm5leHQoPElUb2FzdD57IHR5cGU6IE1lc3NhZ2Uud2FybmluZywgZGV0YWlsOiBtZXNzYWdlLmRldGFpbCwgc3VtbWFyeTogbWVzc2FnZS5zdW1tYXJ5LCBwb3NpdGlvbjogbWVzc2FnZS5wb3NpdGlvbiwgZHVyYXRpb246IG1lc3NhZ2UuZHVyYXRpb24sIHN0aWNreTogbWVzc2FnZS5zdGlja3kgfSlcbiAgfVxufVxuIl19